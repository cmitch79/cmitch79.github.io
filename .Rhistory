modelFit <- train(diagnosis~.data=training2,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- subset(training, select=c(diagnosis,grep("^IL",x=colnames(training))))
modelFit <- train(diagnosis~.,data=training2,method="glm")
install.packages("e1071")
library(e1071)
install.packages("Hmisc")
install.packages("Hmisc")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- subset(training, select=c(diagnosis,grep("^IL",x=colnames(training))))
modelFit <- train(diagnosis~.,data=training2,method="glm")
modelFit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- subset(training, select=c(diagnosis,grep("^IL",x=colnames(training))))
modelFit <- train(diagnosis~.,data=training2,method="glm")
modelFit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- subset(training, select=c(diagnosis,grep("^IL",x=colnames(training))))
modelFit <- train(diagnosis~.,data=testing,method="glm")
modelFit
?createDataPartition
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 <- subset(aData, select=c(diagnosis,grep("^IL",x=colnames(adData))))
inTrain = createDataPartition(adData1$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(diagnosis~.,data=training,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 <- subset(aData, select=c(diagnosis,grep("^IL",x=colnames(adData))))
inTrain = createDataPartition(adData1$diagnosis, p = 3/4)[[1]]
training = adData1[ inTrain,]
testing = adData1[-inTrain,]
modelFit <- train(diagnosis~.,data=training,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 <- subset(aData, select=c(diagnosis,grep("^IL",x=colnames(adData))))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 <- subset(adData, select=c(diagnosis,grep("^IL",x=colnames(adData))))
inTrain = createDataPartition(adData1$diagnosis, p = 3/4)[[1]]
training = adData1[ inTrain,]
testing = adData1[-inTrain,]
modelFit <- train(diagnosis~.,data=training,method="glm")
modelFit
View(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 <- subset(adData, select=c(diagnosis,grep("^IL",x=colnames(adData))))
inTrain = createDataPartition(adData1$diagnosis, p = 3/4)[[1]]
training = adData1[ inTrain,]
testing = adData1[-inTrain,]
modelFit <- train(diagnosis,data=training,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
model1
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 <- subset(adData, select=c(diagnosis,grep("^IL",x=colnames(adData))))
inTrain = createDataPartition(adData1$diagnosis, p = 3/4)[[1]]
training = adData1[ inTrain,]
testing = adData1[-inTrain,]
modelFit <- train(diagnosis~.,data=testing,method="glm")
modelFit
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData1 <- subset(adData, select=c(diagnosis,grep("^IL",x=colnames(adData))))
inTrain = createDataPartition(adData1$diagnosis, p = 3/4)[[1]]
training = adData1[ inTrain,]
testing = adData1[-inTrain,]
modelFit <- train(diagnosis~.,data=training,method="glm")
modelFit <- train(diagnosis~.,preProcess=c("center","scale",data=training,method="glm")
modelFit <- train(diagnosis~.,preProcess=c("center","scale"),data=training,method="glm")
modelFit
modelFit <- train(diagnosis~.,preProcess="BoxCox",data=training,method="glm")
modelFit
modelFitPC <- preProcess(testing, method='pca', thresh = 0.8, outcome = testing$diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training)
plot(training$CompressiveStrength)
plot(training)
library(devtools)
install_github("ramnathv/rCharts@dev")
library(rCharts)
library(devtools)
library(devtools)
install_github("ramnathv/rCharts@dev"
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
library(base64enc)
install_github("ramnathv/rCharts@dev")
View(training)
training <- read.csv("./data/pml-training.csv")
testing <- read.csv("./data/pml-testing.csv")
View(training$classe)
getwd()
training <- read.csv("./data/pml-training.csv")
testing <- read.csv("./data/pml-testing.csv")
training <- read.csv("./data/pml-training.csv",stringsAsFactors=FALSE)
testing <- read.csv("./data/pml-testing.csv",stringsAsFactors=FALSE)
training2 <- sapply(training, function(x)all(is.na(x)))
View(training2)
dim(training)
nearZeroVar(training)
library(caret)
x<- nearZeroVar(training)
View(x)
dim(training)
dim(testing)
names(training)
y <- if(names(training)=names(testing),"e")
y <- if(names(training) = names(testing),"e")
View(training[,160])
View(training$classe)
training2
View(training2)
nz <- nearZeroVar(training[,-160])
training2 <- training[,-nz]
testing2 <- testing[,-nz]
View(training2)
training3 <- training2[, colSums(is.na(train))]
training3 <- training2[, colSums(is.na(train))<19000]
training3 <- training2[, colSums(is.na(training2))<19000]
View(training3)
training2 <- training[,colSums(is.na(training))<nrow(training)]
testing2 <- testing[,colSums(is.na(testing))<nrow(testings)]
testing2 <- testing[,colSums(is.na(testing))<nrow(testing)]
View(testing2)
training2 <- training[,colSums(is.na(training))<nrow(training)]
view(training2)
View(training2)
training2 <- training[,colSums(is.na(training))<.5*nrow(training)]
testing2 <- testing[,colSums(is.na(testing))<.5*nrow(testing)]
View(training2)
nz <- nearZeroVar(training2[,-160])
training3 <- training2[,-nz]
testing3 <- testing2[,-nz]
View(training3)
training_final <- training3[,-1:6]
testing_final <- testing3[,-1:6]
training_final <- training3[,7:ncol(training3)]
testing_final <- testing3[,7:ncol(testing3)]
View(training_final)
View(training)
inTrain <- createDataPartition(y=training_final$classe,p=0.50,list=FALSE)
train <- training_final[inTrain,]
test <- training_final[-inTrain,]
train
View(train)
?predit
?predict
library(caret)
training <- read.csv("./data/pml-training.csv",stringsAsFactors=FALSE)
testing <- read.csv("./data/pml-testing.csv",stringsAsFactors=FALSE)
training2 <- training[,colSums(is.na(training))<.5*nrow(training)]
testing2 <- testing[,colSums(is.na(testing))<.5*nrow(testing)]
nz <- nearZeroVar(training2[,-160])
training3 <- training2[,-nz]
testing3 <- testing2[,-nz]
dim(training3)
dim(testing3)
training_final <- training3[,7:ncol(training3)]
testing_final <- testing3[,7:ncol(testing3)]
inTrain <- createDataPartition(y=training_final$classe,p=0.70,list=FALSE)
train <- training_final[inTrain,]
test <- training_final[-inTrain,]
set.seed(1235)
modFit <- train(classe ~ . data = train, method="rf", trControl = trainControl(method="cv", number = 10))
modFit <- train(classe ~ ., data = train, method="rf", trControl = trainControl(method="cv", number = 10))
library(randomForest)
set.seed(1235)
modFit <- train(classe ~ ., data = train, method="rf", trControl = trainControl(method="cv", number = 10))
View(train)
warnings()
View(train)
dim(train)
?train
library(caret)
train <- training_final[inTrain,]
modFit <- train(classe ~ ., data = train, method="rf")
modFit <- train(classe ~ ., data = training_final, method="rf", trControl = trainControl(method="cv", number = 4))
train?
?train
modFit <- train(classe~., data = train, method="rf", trControl = trainControl(method="cv", number = 4))
modFit <- train(classe~., data = train, method = "rf", trControl = trainControl(method="cv", number = 4))
modFit <- train(classe~., data = train, method = "rf", trControl = trainControl(method= "cv", number = 4))
modFit <- train(classe~., data = train, method = "rf", trControl = trainControl(method= "cv", number = 4))
modFit <- train(classe~., data = train, method = "rf", trControl = trainControl(method = "cv", number = 4))
trControl <- trainControl(method = "cv", number = 4))
trControl <- trainControl(method = "cv", number = 4)
modFit <- train(classe ~ ., data = train, method="rf")
?randomForest
View(train)
?train
set.seed(32323)
fitControl <- trainControl(method = "cv", number = 5)
modFit <- train(classe ~ ., method = "rf", data=train, prox=T, trControl = fitControl))
set.seed(32323)
fitControl <- trainControl(method = "cv", number = 5)
modFit <- train(classe ~ ., method = "rf", data=train, prox=T, trControl = fitControl)
?e1701
install.packages("e1701")
?e1071
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
library(e1071)
pml_train <- read.csv("pml-training.csv", stringsAsFactors = F)
pml_test <- read.csv("pml-testing.csv", stringsAsFactors = F)
pml_train <- read.csv("./data/pml-training.csv", stringsAsFactors = F)
pml_test <- read.csv("./data/pml-testing.csv", stringsAsFactors = F)
train <- pml_train[, -c(1:7, 160)]
for (i in 1:ncol(train)) {
if (class(train[, i]) == "character") {
suppressWarnings(train[, i] <- as.numeric(train[, i]))
}
}
train[is.na(train)] <- 0
Classe <- factor(pml_train[, 160])
testset <- pml_test[, -c(1:7, 160)]
for (i in 1:ncol(testset)) {
if (class(testset[, i]) == "character") {
testset[, i] <- as.numeric(testset[, i])
}
}
testset[is.na(testset)] <- 0
set.seed(32323)
indexTrain <- createDataPartition(y = Classe, p = 0.3, list = FALSE)
training <- train[indexTrain, ]
testing <- train[-indexTrain, ]
trainingClasse <- Classe[indexTrain]
testingClasse <- Classe[-indexTrain]
set.seed(32323)
indexTrain <- createDataPartition(y = Classe, p = 0.3, list = FALSE)
training <- train[indexTrain, ]
testing <- train[-indexTrain, ]
trainingClasse <- Classe[indexTrain]
testingClasse <- Classe[-indexTrain]
library(caret)
library(randomForest)
library(e1071)
set.seed(32323)
indexTrain <- createDataPartition(y = Classe, p = 0.3, list = FALSE)
training <- train[indexTrain, ]
testing <- train[-indexTrain, ]
trainingClasse <- Classe[indexTrain]
testingClasse <- Classe[-indexTrain]
fitControl <- trainControl(method = "cv", number = 5)
set.seed(32323)
fitRF <- train(trainingClasse ~ ., method = "rf", data=training, prox=T, trControl = fitControl)
resultRF <- predict(fitRF, newdata = testing)
confusionMatrix(resultRF, testingClasse)
view(training)
View(training)
training <- read.csv("./data/pml-training.csv",stringsAsFactors=FALSE)
testing <- read.csv("./data/pml-testing.csv",stringsAsFactors=FALSE)
training2 <- training[,colSums(is.na(training))<.5*nrow(training)]
testing2 <- testing[,colSums(is.na(testing))<.5*nrow(testing)]
nz <- nearZeroVar(training2[,-160])
training3 <- training2[,-nz]
testing3 <- testing2[,-nz]
dim(training3)
dim(testing3)
training_final <- training3[,7:ncol(training3)]
testing_final <- testing3[,7:ncol(testing3)]
View(training_final)
set.seed(32323)
inTrain <- createDataPartition(y=training_final$classe,p=0.70,list=FALSE)
train <- training_final[inTrain,]
test <- training_final[-inTrain,]
View(train)
set.seed(32323)
trainControl = trainControl(method = "cv", number = 4, allowParallel = TRUE,verboseIter = TRUE)
modFit <- train(classe ~ ., method = "rf", data=train, prox=T, trControl = trainControl)
has_nas <- colSums(is.na(training)) > 0
has_nas
View(has_nas)
invalid <- apply(training,2,function(x) {sum(is.na(x))})
invalid
invalid <- apply(training,1,function(x) {sum(is.na(x))})
invalid
naCol <- <- apply(training,2,function(x) {sum(is.na(x))})
trainClean1 <- training[,-nacol]
naCol <- apply(training,2,function(x) {sum(is.na(x))})
trainClean1 <- training[,-nacol]
naCol <- apply(training,2,function(x) {sum(is.na(x))})
trainClean1 <- training[,-naCol]
View(trainClean1)
naCol <- apply(training,2,function(x) {sum(is.na(x))})
trainClean1 <- training[,which(naCol == 0)]
View(trainClean1)
nz <- nearZeroVar(trainClean1[,-160])
trainClean2 <- trainClean1[,-nz]
View(trainClean2)
naCol <- apply(training,2,function(x) {sum(is.na(x))})
trainClean1 <- training[,which(naCol == 0)]
testClean1 <- testing[,which(naCol==0)]
nz <- nearZeroVar(trainClean1[,-160])
trainClean2 <- trainClean1[,-nz]
testClean2 <_ testClean2[,-nz]
testClean2 <- testClean2[,-nz]
testClean2 <- testClean1[,-nz]
train <- trainClean2[,7:ncol(trainClean2)]
test <- trainClean2[,7:ncol(testClean2)]
View(test)
set.seed(32323)
inTrain <- createDataPartition(y=train$classe,p=0.70,list=FALSE)
train <- train[inTrain,]
test <- train[-inTrain,]
trainClean3 <- trainClean2[,7:ncol(trainClean2)]
testClean3 <- testClean2[,7:ncol(testClean2)]
set.seed(32323)
inTrain <- createDataPartition(y=trainClean3$classe,p=0.70,list=FALSE)
train <- trainClean3[inTrain,]
test <- trainClean3[-inTrain,]
View(test)
set.seed(32323)
trainControl = trainControl(method = "cv", number = 4, allowParallel = TRUE)
modFit <- train(classe ~ ., method = "rf", data=train, prox=T, trControl = trainControl)
set.seed(32323)
trainControl = trainControl(method = "cv", number = 4)
modFit <- train(train$classe ~., data=train, method = "rf",trControl = trainControl)
warnings()
training <- read.csv("./data/pml-training.csv")
testing <- read.csv("./data/pml-testing.csv")
naCol <- apply(training,2,function(x) {sum(is.na(x))})
trainClean1 <- training[,which(naCol == 0)]
testClean1 <- testing[,which(naCol==0)]
nz <- nearZeroVar(trainClean1[,-160])
trainClean2 <- trainClean1[,-nz]
testClean2 <- testClean1[,-nz]
trainClean3 <- trainClean2[,7:ncol(trainClean2)]
testClean3 <- testClean2[,7:ncol(testClean2)]
set.seed(32323)
inTrain <- createDataPartition(y=trainClean3$classe,p=0.70,list=FALSE)
train <- trainClean3[inTrain,]
test <- trainClean3[-inTrain,]
set.seed(32323)
trainControl = trainControl(method = "cv", number = 4)
modFit <- train(train$classe ~., data=train, method = "rf",trControl = trainControl)
predictions <- predit(modFit,test)
predictions <- predict(modFit,test)
confusionMatrix(predictions,newdata=test)
confusionMatrix(predictions,test$classe)
answers <- predict(modFit, testClean3)
answers
answers <- predict(modFit, testClean3)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
training <- read.csv("./data/pml-training.csv")
testing <- read.csv("./data/pml-testing.csv")
naCol <- apply(training,2,function(x) {sum(is.na(x))})
trainClean1 <- training[,which(naCol == 0)]
testClean1 <- testing[,which(naCol==0)]
nz <- nearZeroVar(trainClean1[,-160])
trainClean2 <- trainClean1[,-nz]
testClean2 <- testClean1[,-nz]
trainClean3 <- trainClean2[,7:ncol(trainClean2)]
testClean3 <- testClean2[,7:ncol(testClean2)]
set.seed(32323)
inTrain <- createDataPartition(y=trainClean3$classe,p=0.70,list=FALSE)
train <- trainClean3[inTrain,]
test <- trainClean3[-inTrain,]
set.seed(32323)
trainControl = trainControl(method = "cv", number = 4)
modFit <- train(train$classe ~., data=train, method = "rf",trControl = trainControl)
modFit
predictions <- predict(modFit,test)
confusionMatrix(predictions,test$classe)
modFit$finalModel
install.packages('rCharts')
install.packages("manipulate")
install.packages("devtools")
install.packages("manipulate")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("manipulate")
?manipulate
library(manipulate)
?manipulate
require(rCharts)
haireye <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart'),
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
iris
names(iris) = gsub("\\.", "",names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point)
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
names(iris) = gsub("\\.", "",names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
library(rCharts)
names(iris) = gsub("\\.", "",names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<iframe src="fig/r1.html" width=100%, height=600></iframe>')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart'
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/h1.html',cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
getwd()
library(slidify)
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
n1
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
map3
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit","Year", options = list(width = 600, height = 400))
print(M,"chart")
M
library(gCharts)
library(googleVis)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400))
print(G, "chart")
setwd("~/R Working Directory/devdataprod/devprodslides")
